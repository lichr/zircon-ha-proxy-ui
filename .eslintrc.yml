root: true
extends:
  - plugin:@typescript-eslint/recommended
  - eslint:recommended
  - plugin:import/recommended
  - plugin:react/recommended
  - plugin:react-hooks/recommended
  - ./.eslintrc.base.yml

parser: '@typescript-eslint/parser'

parserOptions:
  sourceType: module
  # project: ./tsconfig.eslint.json
  ecmaFeatures:
    jsx: true

plugins:
  - '@typescript-eslint'
  - react
  - react-hooks
  - import

globals: {}

env:
  browser: true
  node: true
  es6: true

rules:
  class-methods-use-this: off
  comma-dangle:
    - error
    - never
  lines-between-class-members: off
  max-len: off
  no-bitwise: off
  no-console: off
  no-mixed-operators: off
  no-nested-ternary: off
  no-param-reassign:
    - error
    - props: false
  no-plusplus: off
  no-shadow: off # false positive
  no-throw-literal: off
  no-trailing-spaces:
    - error
  no-underscore-dangle: off
  no-unused-expressions: off # false positive, optional chaining
  no-use-before-define: off
  object-curly-newline: off
  object-curly-spacing:
    - error
    - always
  prefer-destructuring: off
  quote-props:
    - error
    - as-needed

  # typescript
  "@typescript-eslint/camelcase": off
  "@typescript-eslint/explicit-function-return-type": off
  "@typescript-eslint/explicit-member-accessibility": off
  "@typescript-eslint/explicit-module-boundary-types": off
  "@typescript-eslint/naming-convention":
    - error
    - selector: memberLike
      modifiers: [private]
      format: [camelCase]
      leadingUnderscore: require
  "@typescript-eslint/no-empty-function": off
  "@typescript-eslint/no-explicit-any": off
  "@typescript-eslint/no-inferrable-types": off
  "@typescript-eslint/no-non-null-assertion": off
  "@typescript-eslint/no-object-literal-type-assertion": off
  "@typescript-eslint/no-unused-vars": off
  "@typescript-eslint/no-var-requires": off
  "@typescript-eslint/prefer-interface": off
  "@typescript-eslint/quotes":
    - error
    - single
    - avoidEscape: true

  # import
  import/extensions: off
  import/named: off # false position, export * as Actions from './actions'
  import/no-extraneous-dependencies: off # false positive if we are using nested package.json
  import/no-named-as-default: off
  import/no-named-as-default-member: off
  import/no-unresolved: off # false positive, tsconfig + paths
  import/order:
    - error
    - alphabetize:
        order: asc
        caseInsensitive: false
  import/prefer-default-export: off
  
  # react
  react/destructuring-assignment: off
  react/display-name: off
  react/jsx-curly-spacing:
    - error
    - when: never
  react/jsx-filename-extension:
    - error
    - extensions: [".tsx"]
  react/jsx-props-no-spreading: off
  react/no-unknown-property: off
  react/no-unused-prop-types: off
  react/prop-types: off
  react/react-in-jsx-scope: off
  react/require-default-props: off
  react/static-property-placement: off
  react-hooks/exhaustive-deps:
    - warn
    - additionalHooks: "^useResource$"

settings:
  import/resolver:
    node:
      extensions: [".js", ".ts", ".jsx", ".tsx", ".json"]
  import/extensions: [".js", ".ts", ".mjs", ".jsx", ".tsx"]
  react:
    version: detect
